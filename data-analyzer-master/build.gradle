plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'jacoco'
}


group 'org.example'
version '1.0-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.projectlombok:lombok'

    compileOnly 'org.projectlombok:lombok'
    compile 'org.springframework.kafka:spring-kafka'
    compile group: 'org.twitter4j', name: 'twitter4j-core', version: '4.0.7'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    compile 'org.apache.commons:commons-csv:1.8'

    testCompile 'com.salesforce.kafka.test:kafka-junit5:3.2.1'
    testCompile 'org.awaitility:awaitility:3.1.6'
    testCompile group: 'net.mguenther.kafka', name: 'kafka-junit', version: '2.4.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}


test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    jacocoTestReport
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    executionData(test)
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'SOURCEFILE'
            limit {
                counter = 'BRANCH'
                minimum = 1
            }
        }
    }
}

jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)

check.dependsOn(jacocoTestCoverageVerification)
check.dependsOn(jacocoTestReport)
